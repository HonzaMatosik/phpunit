<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="4.x-dev@">
  <file src="src/Event/Dispatcher/DirectDispatcher.php">
    <UndefinedInterfaceMethod occurrences="1">
      <code>notify</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Event/Facade.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>$eventClass . 'Subscriber'</code>
    </ArgumentTypeCoercion>
    <PossiblyNullReference occurrences="1">
      <code>flush</code>
    </PossiblyNullReference>
  </file>
  <file src="src/Event/Value/Runtime/PHP.php">
    <ImpureFunctionCall occurrences="1">
      <code>get_loaded_extensions</code>
    </ImpureFunctionCall>
  </file>
  <file src="src/Event/Value/Telemetry/HRTime.php">
    <ImpureMethodCall occurrences="1">
      <code>fromSecondsAndNanoseconds</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Event/Value/Telemetry/MemoryUsage.php">
    <ImpureMethodCall occurrences="1">
      <code>fromBytes</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Event/Value/Test/TestMethod.php">
    <ImpureMethodCall occurrences="4">
      <code>dataFromDataProvider</code>
      <code>dataFromDataProvider</code>
      <code>hasDataFromDataProvider</code>
      <code>hasDataFromDataProvider</code>
    </ImpureMethodCall>
  </file>
  <file src="src/Event/Value/TestSuite/TestSuite.php">
    <ArgumentTypeCoercion occurrences="4">
      <code>$className</code>
      <code>$testSuite-&gt;getName()</code>
      <code>$testSuite-&gt;getName()</code>
      <code>$testSuite-&gt;getName()</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Event/Value/TestSuite/TestSuiteForTestMethodWithDataProvider.php">
    <PropertyTypeCoercion occurrences="1">
      <code>$className</code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Framework/Assert/Functions.php">
    <TooManyArguments occurrences="14">
      <code>Assert::anything(...func_get_args())</code>
      <code>Assert::directoryExists(...func_get_args())</code>
      <code>Assert::fileExists(...func_get_args())</code>
      <code>Assert::isEmpty(...func_get_args())</code>
      <code>Assert::isFalse(...func_get_args())</code>
      <code>Assert::isFinite(...func_get_args())</code>
      <code>Assert::isInfinite(...func_get_args())</code>
      <code>Assert::isJson(...func_get_args())</code>
      <code>Assert::isList(...func_get_args())</code>
      <code>Assert::isNan(...func_get_args())</code>
      <code>Assert::isNull(...func_get_args())</code>
      <code>Assert::isReadable(...func_get_args())</code>
      <code>Assert::isTrue(...func_get_args())</code>
      <code>Assert::isWritable(...func_get_args())</code>
    </TooManyArguments>
  </file>
  <file src="src/Framework/Constraint/Operator/LogicalXor.php">
    <InvalidArgument occurrences="1">
      <code>bool</code>
    </InvalidArgument>
  </file>
  <file src="src/Framework/Constraint/Type/IsInstanceOf.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>$this-&gt;className</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Framework/DataProviderTestSuite.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>$className</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Framework/MockObject/Generator.php">
    <ArgumentTypeCoercion occurrences="4">
      <code>$className</code>
      <code>$className</code>
      <code>$interfaceName</code>
      <code>$type</code>
    </ArgumentTypeCoercion>
    <InvalidReturnStatement occurrences="1"/>
    <InvalidReturnType occurrences="1">
      <code>MockObject&amp;RealInstanceType</code>
    </InvalidReturnType>
    <LessSpecificReturnStatement occurrences="1"/>
    <MoreSpecificReturnType occurrences="1">
      <code>MockObject</code>
    </MoreSpecificReturnType>
    <PossiblyNullArgument occurrences="1">
      <code>$client-&gt;__getFunctions()</code>
    </PossiblyNullArgument>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>assert(class_exists($type))</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Framework/MockObject/Invocation.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>$types</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Framework/MockObject/Matcher.php">
    <InvalidNullableReturnType occurrences="1">
      <code>MethodName</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement occurrences="1">
      <code>$this-&gt;methodNameRule</code>
    </NullableReturnStatement>
  </file>
  <file src="src/Framework/MockObject/MockBuilder.php">
    <ArgumentTypeCoercion occurrences="4">
      <code>$this-&gt;type</code>
      <code>$this-&gt;type</code>
      <code>$this-&gt;type</code>
      <code>$this-&gt;type</code>
    </ArgumentTypeCoercion>
    <InvalidReturnStatement occurrences="3">
      <code>$object</code>
      <code>$object</code>
      <code>$object</code>
    </InvalidReturnStatement>
    <InvalidReturnType occurrences="3">
      <code>MockObject&amp;MockedType</code>
      <code>MockObject&amp;MockedType</code>
      <code>MockObject&amp;MockedType</code>
    </InvalidReturnType>
  </file>
  <file src="src/Framework/MockObject/MockMethod.php">
    <InvalidArgument occurrences="1"/>
    <PossiblyFalseOperand occurrences="1">
      <code>strpos($parameterAsString, '&lt;optional&gt; ')</code>
    </PossiblyFalseOperand>
  </file>
  <file src="src/Framework/MockObject/Rule/Parameters.php">
    <PropertyNotSetInConstructor occurrences="1">
      <code>$parameterVerificationResult</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Framework/MockObject/Stub/ReturnCallback.php">
    <PossiblyInvalidOperand occurrences="1">
      <code>$this-&gt;callback</code>
    </PossiblyInvalidOperand>
  </file>
  <file src="src/Framework/TestBuilder.php">
    <LessSpecificReturnStatement occurrences="1">
      <code>$test</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType occurrences="1">
      <code>Test</code>
    </MoreSpecificReturnType>
  </file>
  <file src="src/Framework/TestCase.php">
    <ArgumentTypeCoercion occurrences="3">
      <code>$mockClassName</code>
      <code>$originalClassName</code>
      <code>$this-&gt;expectedException</code>
    </ArgumentTypeCoercion>
    <InvalidReturnStatement occurrences="1">
      <code>$mockObject</code>
    </InvalidReturnStatement>
    <InvalidReturnType occurrences="1">
      <code>MockObject&amp;RealInstanceType</code>
    </InvalidReturnType>
    <PropertyNotSetInConstructor occurrences="1">
      <code>$outputBufferingLevel</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Framework/TestRunner.php">
    <InvalidScalarArgument occurrences="1">
      <code>$var</code>
    </InvalidScalarArgument>
  </file>
  <file src="src/Framework/TestSuite.php">
    <ArgumentTypeCoercion occurrences="3">
      <code>$this-&gt;name</code>
      <code>$this-&gt;name</code>
      <code>$this-&gt;name</code>
    </ArgumentTypeCoercion>
    <RedundantConditionGivenDocblockType occurrences="1">
      <code>assert(class_exists($className))</code>
    </RedundantConditionGivenDocblockType>
    <UnsafeInstantiation occurrences="2">
      <code>new static($class-&gt;getName())</code>
      <code>new static($name)</code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Logging/JUnit/JunitXmlLogger.php">
    <InvalidPropertyAssignmentValue occurrences="1">
      <code>$this-&gt;testSuiteTimes</code>
    </InvalidPropertyAssignmentValue>
    <RedundantCondition occurrences="1">
      <code>assert($test instanceof TestMethod)</code>
    </RedundantCondition>
  </file>
  <file src="src/Logging/TeamCity/TeamCityLogger.php">
    <PropertyNotSetInConstructor occurrences="1">
      <code>$flowId</code>
    </PropertyNotSetInConstructor>
    <RedundantCondition occurrences="4">
      <code>assert($test instanceof TestMethod)</code>
      <code>assert($testSuite instanceof TestSuiteForTestClass)</code>
      <code>assert($testSuite instanceof TestSuiteForTestMethodWithDataProvider)</code>
      <code>assert($testSuite instanceof TestSuiteForTestMethodWithDataProvider)</code>
    </RedundantCondition>
  </file>
  <file src="src/Logging/TestDox/NamePrettifier.php">
    <InvalidCast occurrences="1">
      <code>$value</code>
    </InvalidCast>
  </file>
  <file src="src/Logging/TestDox/TestMethod/TestResultCollector.php">
    <PossiblyNullArgument occurrences="2">
      <code>$this-&gt;status</code>
      <code>$this-&gt;time</code>
    </PossiblyNullArgument>
    <RedundantCondition occurrences="1">
      <code>assert($test instanceof TestMethod)</code>
    </RedundantCondition>
  </file>
  <file src="src/Metadata/Api/CodeCoverage.php">
    <RedundantCondition occurrences="4">
      <code>$metadata instanceof CoversFunction</code>
      <code>$metadata instanceof UsesFunction</code>
      <code>assert($metadata instanceof Covers)</code>
      <code>assert($metadata instanceof Uses)</code>
    </RedundantCondition>
    <UndefinedMethod occurrences="2">
      <code>className</code>
      <code>className</code>
    </UndefinedMethod>
  </file>
  <file src="src/Metadata/Api/Dependencies.php">
    <RedundantCondition occurrences="2">
      <code>assert($metadata instanceof DependsOnClass)</code>
      <code>assert($metadata instanceof DependsOnMethod)</code>
    </RedundantCondition>
  </file>
  <file src="src/Metadata/Api/Groups.php">
    <LessSpecificReturnStatement occurrences="2">
      <code>array_unique($groups)</code>
      <code>array_unique($groups)</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType occurrences="1">
      <code>list&lt;string&gt;</code>
    </MoreSpecificReturnType>
    <RedundantCondition occurrences="5">
      <code>$metadata instanceof CoversFunction</code>
      <code>$metadata instanceof UsesFunction</code>
      <code>assert($metadata instanceof Covers)</code>
      <code>assert($metadata instanceof Metadata)</code>
      <code>assert($metadata instanceof Uses)</code>
    </RedundantCondition>
  </file>
  <file src="src/Metadata/Api/Requirements.php">
    <RedundantCondition occurrences="8">
      <code>assert($metadata instanceof RequiresFunction)</code>
      <code>assert($metadata instanceof RequiresMethod)</code>
      <code>assert($metadata instanceof RequiresOperatingSystem)</code>
      <code>assert($metadata instanceof RequiresOperatingSystemFamily)</code>
      <code>assert($metadata instanceof RequiresPhp)</code>
      <code>assert($metadata instanceof RequiresPhpExtension)</code>
      <code>assert($metadata instanceof RequiresPhpunit)</code>
      <code>assert($metadata instanceof RequiresSetting)</code>
    </RedundantCondition>
  </file>
  <file src="src/Metadata/Metadata.php">
    <ArgumentTypeCoercion occurrences="2">
      <code>$className</code>
      <code>$className</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Metadata/Parser/AnnotationParser.php">
    <ArgumentTypeCoercion occurrences="7">
      <code>$className</code>
      <code>$className</code>
      <code>$className</code>
      <code>$pieces[0]</code>
      <code>$pieces[0]</code>
      <code>explode('::', $value)</code>
      <code>trim($tmp[0])</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Metadata/Version/Requirement.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>!empty($matches['operator']) ? $matches['operator'] : '&gt;='</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="src/Runner/CodeCoverage.php">
    <InvalidNullableReturnType occurrences="2">
      <code>Driver</code>
      <code>\SebastianBergmann\CodeCoverage\CodeCoverage</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement occurrences="2">
      <code>self::$driver</code>
      <code>self::$instance</code>
    </NullableReturnStatement>
    <PossiblyNullReference occurrences="2">
      <code>start</code>
      <code>stop</code>
    </PossiblyNullReference>
  </file>
  <file src="src/Runner/Filter/NameFilterIterator.php">
    <PossiblyNullArgument occurrences="1">
      <code>$this-&gt;filter</code>
    </PossiblyNullArgument>
  </file>
  <file src="src/Runner/PhptTestCase.php">
    <InternalClass occurrences="2">
      <code>RawCodeCoverageData::fromXdebugWithoutPathCoverage([])</code>
      <code>RawCodeCoverageData::fromXdebugWithoutPathCoverage([])</code>
    </InternalClass>
    <InternalMethod occurrences="2">
      <code>RawCodeCoverageData::fromXdebugWithoutPathCoverage([])</code>
      <code>RawCodeCoverageData::fromXdebugWithoutPathCoverage([])</code>
    </InternalMethod>
    <PossiblyInvalidArgument occurrences="1">
      <code>$sections['FILEEOF']</code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/Runner/TestResult/Collector.php">
    <RedundantCondition occurrences="1">
      <code>assert($testSuite instanceof TestSuiteForTestClass)</code>
    </RedundantCondition>
  </file>
  <file src="src/Runner/TestSuiteLoader.php">
    <UnresolvableInclude occurrences="1">
      <code>include_once $suiteClassFile</code>
    </UnresolvableInclude>
  </file>
  <file src="src/Runner/TestSuiteSorter.php">
    <ArgumentTypeCoercion occurrences="1">
      <code>$tests</code>
    </ArgumentTypeCoercion>
    <RedundantCondition occurrences="4">
      <code>$order === self::ORDER_DURATION &amp;&amp; $this-&gt;cache !== null</code>
      <code>$orderDefects === self::ORDER_DEFECTS_FIRST &amp;&amp; $this-&gt;cache !== null</code>
      <code>$this-&gt;cache !== null</code>
      <code>$this-&gt;cache !== null</code>
    </RedundantCondition>
  </file>
  <file src="src/TextUI/Application.php">
    <PossiblyUndefinedArrayOffset occurrences="1">
      <code>$_SERVER['argv']</code>
    </PossiblyUndefinedArrayOffset>
    <UnresolvableInclude occurrences="1">
      <code>include_once $filename</code>
    </UnresolvableInclude>
  </file>
  <file src="src/TextUI/Configuration/Cli/Configuration.php">
    <InvalidNullableReturnType occurrences="2">
      <code>bool</code>
      <code>string</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement occurrences="2">
      <code>$this-&gt;excludeTestSuite</code>
      <code>$this-&gt;teamCityPrinter</code>
    </NullableReturnStatement>
  </file>
  <file src="src/TextUI/Configuration/Configuration.php">
    <PossiblyInvalidPropertyAssignmentValue occurrences="1">
      <code>$columns</code>
    </PossiblyInvalidPropertyAssignmentValue>
  </file>
  <file src="src/TextUI/Configuration/Merger.php">
    <DeprecatedMethod occurrences="4">
      <code>cacheDirectory</code>
      <code>cacheResultFile</code>
      <code>hasCacheDirectory</code>
      <code>hasCacheResultFile</code>
    </DeprecatedMethod>
    <PossiblyUndefinedArrayOffset occurrences="1">
      <code>$_SERVER['PHP_SELF']</code>
    </PossiblyUndefinedArrayOffset>
    <RedundantCondition occurrences="1">
      <code>assert($xmlConfiguration instanceof LoadedFromFileConfiguration)</code>
    </RedundantCondition>
  </file>
  <file src="src/TextUI/Configuration/Xml/CodeCoverage/CodeCoverage.php">
    <DeprecatedMethod occurrences="1">
      <code>hasCacheDirectory</code>
    </DeprecatedMethod>
  </file>
  <file src="src/TextUI/Configuration/Xml/CodeCoverage/Filter/DirectoryCollectionIterator.php">
    <InvalidNullableReturnType occurrences="1">
      <code>int</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement occurrences="1">
      <code>$this-&gt;position</code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset occurrences="1">
      <code>$this-&gt;directories</code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/Filesystem/DirectoryCollectionIterator.php">
    <InvalidNullableReturnType occurrences="1">
      <code>int</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement occurrences="1">
      <code>$this-&gt;position</code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset occurrences="1">
      <code>$this-&gt;directories</code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/Filesystem/FileCollectionIterator.php">
    <InvalidNullableReturnType occurrences="1">
      <code>int</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement occurrences="1">
      <code>$this-&gt;position</code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset occurrences="1">
      <code>$this-&gt;files</code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/Group/GroupCollectionIterator.php">
    <InvalidNullableReturnType occurrences="1">
      <code>int</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement occurrences="1">
      <code>$this-&gt;position</code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset occurrences="1">
      <code>$this-&gt;groups</code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/Loader.php">
    <ArgumentTypeCoercion occurrences="3">
      <code>$bootstrap-&gt;getAttribute('class')</code>
      <code>$directoryNode-&gt;getAttribute('phpVersionOperator')</code>
      <code>$fileNode-&gt;getAttribute('phpVersionOperator')</code>
    </ArgumentTypeCoercion>
    <RedundantConditionGivenDocblockType occurrences="2">
      <code>assert($directoryNode instanceof DOMElement)</code>
      <code>assert($fileNode instanceof DOMElement)</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoverageCloverToReport.php">
    <PossiblyNullReference occurrences="1">
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoverageCrap4jToReport.php">
    <PossiblyNullReference occurrences="1">
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoverageHtmlToReport.php">
    <PossiblyNullReference occurrences="1">
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoveragePhpToReport.php">
    <PossiblyNullReference occurrences="1">
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoverageTextToReport.php">
    <PossiblyNullReference occurrences="1">
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/CoverageXmlToReport.php">
    <PossiblyNullReference occurrences="1">
      <code>createElement</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/LogToReportMigration.php">
    <PossiblyNullReference occurrences="1">
      <code>removeChild</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/Migration/Migrations/RemoveEmptyFilter.php">
    <PossiblyNullReference occurrences="2">
      <code>removeChild</code>
      <code>removeChild</code>
    </PossiblyNullReference>
  </file>
  <file src="src/TextUI/Configuration/Xml/PHP/ConstantCollectionIterator.php">
    <InvalidNullableReturnType occurrences="1">
      <code>int</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement occurrences="1">
      <code>$this-&gt;position</code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset occurrences="1">
      <code>$this-&gt;constants</code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/PHP/IniSettingCollectionIterator.php">
    <InvalidNullableReturnType occurrences="1">
      <code>int</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement occurrences="1">
      <code>$this-&gt;position</code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset occurrences="1">
      <code>$this-&gt;iniSettings</code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/PHP/VariableCollectionIterator.php">
    <InvalidNullableReturnType occurrences="1">
      <code>int</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement occurrences="1">
      <code>$this-&gt;position</code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset occurrences="1">
      <code>$this-&gt;variables</code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/PHPUnit/ExtensionBootstrapCollectionIterator.php">
    <InvalidNullableReturnType occurrences="1">
      <code>int</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement occurrences="1">
      <code>$this-&gt;position</code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset occurrences="1">
      <code>$this-&gt;extensionBootstraps</code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/PHPUnit/PHPUnit.php">
    <DeprecatedMethod occurrences="1">
      <code>hasCacheResultFile</code>
    </DeprecatedMethod>
  </file>
  <file src="src/TextUI/Configuration/Xml/TestSuite/TestDirectoryCollectionIterator.php">
    <InvalidNullableReturnType occurrences="1">
      <code>int</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement occurrences="1">
      <code>$this-&gt;position</code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset occurrences="1">
      <code>$this-&gt;directories</code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/TestSuite/TestFileCollectionIterator.php">
    <InvalidNullableReturnType occurrences="1">
      <code>int</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement occurrences="1">
      <code>$this-&gt;position</code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset occurrences="1">
      <code>$this-&gt;files</code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Configuration/Xml/TestSuite/TestSuiteCollectionIterator.php">
    <InvalidNullableReturnType occurrences="1">
      <code>int</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement occurrences="1">
      <code>$this-&gt;position</code>
    </NullableReturnStatement>
    <PossiblyNullArrayOffset occurrences="1">
      <code>$this-&gt;testSuites</code>
    </PossiblyNullArrayOffset>
  </file>
  <file src="src/TextUI/Help.php">
    <PossiblyUndefinedArrayOffset occurrences="2">
      <code>$option['desc']</code>
      <code>$option['desc']</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="src/TextUI/Output/Default/ResultPrinter.php">
    <RedundantCondition occurrences="2">
      <code>assert($test instanceof TestMethod)</code>
      <code>assert($test instanceof TestMethod)</code>
    </RedundantCondition>
  </file>
  <file src="src/TextUI/TestRunner.php">
    <InternalMethod occurrences="1">
      <code>nameAndVersion</code>
    </InternalMethod>
    <PropertyNotSetInConstructor occurrences="1">
      <code>$printer</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Util/PHP/DefaultPhpProcess.php">
    <DocblockTypeContradiction occurrences="1">
      <code>is_array($envVar)</code>
    </DocblockTypeContradiction>
    <RedundantCondition occurrences="1">
      <code>$_SERVER</code>
    </RedundantCondition>
    <TypeDoesNotContainNull occurrences="1">
      <code>[]</code>
    </TypeDoesNotContainNull>
  </file>
  <file src="src/Util/Printer/DefaultPrinter.php">
    <PossiblyInvalidArgument occurrences="2">
      <code>$this-&gt;stream</code>
      <code>$this-&gt;stream</code>
    </PossiblyInvalidArgument>
  </file>
  <file src="src/Util/Reflection.php">
    <PossiblyNullArgument occurrences="1">
      <code>$filter</code>
    </PossiblyNullArgument>
  </file>
  <file src="src/Util/VersionComparisonOperator.php">
    <DocblockTypeContradiction occurrences="1">
      <code>in_array($operator, ['&lt;', 'lt', '&lt;=', 'le', '&gt;', 'gt', '&gt;=', 'ge', '==', '=', 'eq', '!=', '&lt;&gt;', 'ne'], true)</code>
    </DocblockTypeContradiction>
  </file>
</files>
